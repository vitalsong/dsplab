#include "hilbert-transform.h"
#include "dsplib/hilbert.h"

#include <string>
#include <stdlib.h>
#include <math.h>
#include <mutex>

using namespace DspLab;

//-------------------------------------------------------------------------------------------------
//ИХ характеристика фильтра Гилберта
#define NFIR (101)
static const double FIR[NFIR] = {1.259360394708e-15,  -0.0001304761389465, 1.174866963455e-15,
                                 -0.0002029748744922, 1.374169920651e-15,  -0.0003547192834265,
                                 2.619526967157e-15,  -0.0005752504637274, 3.047170079698e-15,
                                 -0.0008838570883754, 4.57699593699e-15,   -0.001303301689776,
                                 4.828076342713e-15,  -0.00185939798324,   7.462624564599e-15,
                                 -0.002581673560742,  7.887163325403e-15,  -0.003503797920069,
                                 9.197112930719e-15,  -0.004664131994993,  1.007374831647e-14,
                                 -0.006106840275994,  1.221470828688e-14,  -0.007883785040501,
                                 1.202187107678e-14,  -0.01005747702355,   1.335880060982e-14,
                                 -0.01270578462704,   1.374108614877e-14,  -0.01592974275235,
                                 1.372431065453e-14,  -0.01986675956921,   1.387387667858e-14,
                                 -0.02471351425488,   1.349289503416e-14,  -0.03076747674594,
                                 1.298533688793e-14,  -0.03850710388031,   1.100607859795e-14,
                                 -0.04875987453913,   1.008304146381e-14,  -0.06309452051792,
                                 9.00674069518e-15,   -0.08488544588122,   6.310242583861e-15,
                                 -0.1229311454849,    4.581142214648e-15,  -0.2095449165838,
                                 2.124247647209e-15,  -0.6357281804807,    0,
                                 0.6357281804807,     -2.124247647209e-15, 0.2095449165838,
                                 -4.581142214648e-15, 0.1229311454849,     -6.310242583861e-15,
                                 0.08488544588122,    -9.00674069518e-15,  0.06309452051792,
                                 -1.008304146381e-14, 0.04875987453913,    -1.100607859795e-14,
                                 0.03850710388031,    -1.298533688793e-14, 0.03076747674594,
                                 -1.349289503416e-14, 0.02471351425488,    -1.387387667858e-14,
                                 0.01986675956921,    -1.372431065453e-14, 0.01592974275235,
                                 -1.374108614877e-14, 0.01270578462704,    -1.335880060982e-14,
                                 0.01005747702355,    -1.202187107678e-14, 0.007883785040501,
                                 -1.221470828688e-14, 0.006106840275994,   -1.007374831647e-14,
                                 0.004664131994993,   -9.197112930719e-15, 0.003503797920069,
                                 -7.887163325403e-15, 0.002581673560742,   -7.462624564599e-15,
                                 0.00185939798324,    -4.828076342713e-15, 0.001303301689776,
                                 -4.57699593699e-15,  0.0008838570883754,  -3.047170079698e-15,
                                 0.0005752504637274,  -2.619526967157e-15, 0.0003547192834265,
                                 -1.374169920651e-15, 0.0002029748744922,  -1.174866963455e-15,
                                 0.0001304761389465,  -1.259360394708e-15};

//-------------------------------------------------------------------------------------------------
HilbertTransform::HilbertTransform()
  : Device(1, 1)
{
    //настройка портов по-умолчанию
    Device::setAvaliableInputFormats({Real});
    Device::setAvaliableOutputFormats({Complex});

    //создание фильтра Гилберта
    m_hilbert = HilbertPtr(new dsplib::HilbertFilter(dsplib::arr_real(FIR, NFIR)));
}

//-------------------------------------------------------------------------------------------------
HilbertTransform::~HilbertTransform()
{
    HilbertTransform::stop();
}

//-------------------------------------------------------------------------------------------------
void HilbertTransform::processing()
{
    while (Device::ioSize() > 0) {
        //чтение из порта
        Device::ioRead(m_frameIn);

        //определяем содержимое фрейма
        auto package = m_frameIn.getReal();
        const real_t* data = package.data();
        int size = package.size();
        DspMeta meta = package.meta();

        //процессинг фильтра
        auto res = m_hilbert->process(dsplib::arr_real(data, size));

        //запаковка фрейма
        m_frameOut.setComplex({(complex_t*)res.data(), res.size(), meta});

        //отправка на выход
        Device::ioWrite(m_frameOut);
    }
}
